package net.kallx.budget.control;

import java.util.ArrayList;
import java.util.List;

import javax.enterprise.context.SessionScoped;
import javax.enterprise.event.Observes;
import javax.inject.Inject;
import javax.inject.Named;

import net.kallx.budget.control.bean.FlowItemBean;
import net.kallx.budget.model.FlowItem;
import net.kallx.budget.service.FlowItemManager;
import net.kallx.portalmanager.model.PortalApplication;
import net.kallx.utils.category.control.bean.CategoryBean;
import net.kallx.utils.webmvc.AbstractController;
import net.kallx.utils.webmvc.AbstractManager;
import net.kallx.utils.webmvc.GenericFactory;

@Named("flowController")
@SessionScoped
public class FlowItemController extends AbstractController<FlowItem, FlowItemBean> {

	private static final long serialVersionUID = 1L;

	@Inject private FlowItemManager manager;
	@Inject private FlowTransactionController transactionController;
	
	
	private List<CategoryBean> subCategories;
	
	public FlowItemController() {
		subCategories = new ArrayList<CategoryBean>();
	}
	
	
	public void searchSubCategories(){
		if (bean == null) return;
		CategoryBean category = bean.getCategory();
		if (category == null) return;
		subCategories = category.getChilds();
	}
	public List<CategoryBean> getSubCategories(){
		searchSubCategories();
		return subCategories;
	}
	
	
	public void createCredit(){
		create();
		bean.setCredit(true);
	}
	public boolean hasCredit(){
		return (bean != null && bean.isCredit());
	}
	
	
	public void createDebit(){
		create();
		bean.setCredit(false);
	}
	public boolean hasDebit(){
		return (bean != null && !bean.isCredit());
	}
	
	
	public void createTransfer(){
		create();
		bean.setTransfer(true);
		bean.setType("TRANSFER");
	}
	public boolean hasTransfer(){
		return (bean != null && bean.isTransfer());
	}

	
	public List<FlowItemBean> getDebitRecurrentBeans(){
		ArrayList<FlowItemBean> ret = new ArrayList<FlowItemBean>();

		for (FlowItemBean fab : beans) {
			if (fab.isRecurrentType() && !fab.isCredit())
				ret.add(fab);
		}
		
		return ret;
	}
	public List<FlowItemBean> getCreditRecurrentBeans(){
		ArrayList<FlowItemBean> ret = new ArrayList<FlowItemBean>();

		for (FlowItemBean fab : beans) {
			if (fab.isRecurrentType() && fab.isCredit())
				ret.add(fab);
		}
		
		return ret;
	}
	public List<FlowItemBean> getDebitInstalmentBeans(){
		
		ArrayList<FlowItemBean> ret = new ArrayList<FlowItemBean>();
		
		for (FlowItemBean fab : beans) {
			if (fab.isInstalmentsType() && !fab.isCredit())
				ret.add(fab);
		}
		
		return ret;
	}
	public List<FlowItemBean> getCreditInstalmentBeans(){
		
		ArrayList<FlowItemBean> ret = new ArrayList<FlowItemBean>();
		
		for (FlowItemBean fab : beans) {
			if (fab.isInstalmentsType() && fab.isCredit())
				ret.add(fab);
		}
		
		return ret;
	}
	public List<FlowItemBean> getTransferBeans(){
		
		ArrayList<FlowItemBean> ret = new ArrayList<FlowItemBean>();
		
		for (FlowItemBean fab : beans) {
			if (fab.isTransfer())
				ret.add(fab);
		}
		
		return ret;
		
	}
	
	
	public boolean isRecurrent(){
		return (bean != null && bean.isRecurrentType() ? true : false);
	}
	
	public boolean isInstalments(){
		return (bean != null && bean.isInstalmentsType() ? true : false);
	}
	
	@Override
	public void save() {

		manager.load(getAsModel(bean));
		FlowItem item = bean.getModel();
		item.generateTransactions();
		manager.save();
		
		if (!beans.contains(bean))
			beans.add(bean);
		
		doPostSave();
		
	
	}
	@Override
	protected void doPostSave() {
		super.doPostSave();
		if (transactionController != null)
			transactionController.updateBeans();
	}
	
	
	public void listApplicationLoading(@Observes PortalApplication application){
		if (application.getName().equals("budget"))
			beans = updateBeans();
	}
	
	
	@Override
	public AbstractManager<FlowItem> getManager() {
		return manager;
	}
	@Override
	public Class<FlowItemBean> getBeanClazz() {
		return FlowItemBean.class;
	}
	@Override
	public GenericFactory<FlowItem> getFactory() {
		// TODO Auto-generated method stub
		return null;
	}
	
}
