package net.kallx.security.model;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.CollectionTable;
import javax.persistence.Column;
import javax.persistence.ElementCollection;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.TableGenerator;
import javax.persistence.Transient;

import net.kallx.utils.webmvc.GenericModel;

@Entity
@Table(name="User", schema="security")
public class User implements GenericModel {

	@Transient
	private static final long serialVersionUID = 1L;
	
	@Id @GeneratedValue(strategy=GenerationType.TABLE, generator="SecuritySequence")
	@TableGenerator(name="SecuritySequence", table="SecuritySequence", schema="security", 
			pkColumnName="cTable", pkColumnValue="UserSequence", valueColumnName="cNext", allocationSize=1)
	@Column(name="cId")
	private long id;
	
	@Column(name="cFirstName")
	private String firstName;
	
	@Column(name="cLastName")
	private String lastName;
	
	@Column(name="cStatus")
	private boolean status;
	
	@ElementCollection(fetch=FetchType.EAGER)
	@CollectionTable(name="PhoneInfo", schema="security", joinColumns=@JoinColumn(name="cUser"))
	private Set<PhoneInfo> phoneInfos = new HashSet<PhoneInfo>();
	
	@ElementCollection(fetch=FetchType.EAGER)
	@CollectionTable(name="EmailInfo", schema="security", joinColumns=@JoinColumn(name="cUser"))
	private Set<EmailInfo> emailInfos = new HashSet<EmailInfo>();
	
	@OneToMany(mappedBy="user", fetch=FetchType.EAGER)
	private List<UserPrincipal> principals = new ArrayList<UserPrincipal>();
	
	@OneToOne(cascade=javax.persistence.CascadeType.ALL)
	@JoinColumn(name="cLoginInfo")
	private LoginInfo loginInfo = new LoginInfo();
	
	
	public String getName(){
		return (firstName != null ? firstName : "") + " - " + (lastName != null ? lastName : "");
	}

	@Override
	public long getId() {
		return id;
	}
	@Override
	public void setId(long id) {
		this.id = id;
	}
	
	
	public PhoneInfo getMainPhoneInfo(){
		for (PhoneInfo pi : phoneInfos) {
			if (pi.isMain())
				return pi;
		}
		return null;
	}
	
	public EmailInfo getMainEmailInfo(){
		for (EmailInfo ei : emailInfos) {
			if (ei.isMain())
				return ei;
		}
		return null;
	}
	
	
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	
	
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	
	
	public boolean isStatus() {
		return status;
	}
	public void setStatus(boolean status) {
		this.status = status;
	}
	
	
	public List<UserPrincipal> getPrincipals() {
		return principals;
	}
	public void setPrincipals(List<UserPrincipal> principals) {
		this.principals = principals;
	}

	
	public void addEmailInfo(EmailInfo info){
		
		assert (info != null);
		
		if (info.isMain()) {
			EmailInfo ei = getMainEmailInfo();
			if (ei != null) 
				emailInfos.remove(ei);
		}
		
		emailInfos.add(info);
		
	}
	public Set<EmailInfo> getEmailInfos() {
		return emailInfos;
	}
	public void setEmailInfos(Set<EmailInfo> emailInfos) {
		this.emailInfos = emailInfos;
	}
	
	
	public void addPhoneInfo(PhoneInfo info){
		
		assert (info != null);
		
		if (info.isMain()) {
			PhoneInfo pi = getMainPhoneInfo();
			if (pi != null)
				phoneInfos.remove(pi);
		}
		phoneInfos.add(info);
		
	}
	public Set<PhoneInfo> getPhoneInfos() {
		return phoneInfos;
	}
	public void setPhoneInfos(Set<PhoneInfo> phoneInfos) {
		this.phoneInfos = phoneInfos;
	}
	
	
	public LoginInfo getLoginInfo() {
		return loginInfo;
	}
	public void setLoginInfo(LoginInfo loginInfo) {
		this.loginInfo = loginInfo;
	}

}